{"version":3,"sources":["utils.js","Pokedex.js","pokemonDetail.js","App.js","serviceWorker.js","index.js"],"names":["toFirstCharUpper","word","charAt","toUpperCase","slice","useStyles","makeStyles","theme","pokedexContainer","paddingTop","paddingLeft","paddingRight","cardMedia","margin","cardContent","textAlign","card","boxShadow","searchInput","width","searchIcon","alignSelf","marginBottom","searchContainer","display","backgroundColor","fade","palette","common","white","marginTop","title","marginLeft","breakpoints","up","Pokedex","props","classes","history","useState","pokemonData","setPokemonData","filter","setFilter","useEffect","axios","get","then","response","results","data","newPokemonData","forEach","pokemon","index","id","name","sprite","AppBar","position","color","Toolbar","style","height","src","Typography","className","variant","noWrap","Link","onClick","push","TextField","label","onChange","e","target","value","Grid","container","spacing","Object","keys","map","pokemonId","includes","toLowerCase","console","log","item","xs","sm","key","Card","CardMedia","image","CardContent","getPokemonCard","CircularProgress","idNumText","top","left","img","verticalAlign","statsCard","Pokemon","match","params","undefined","setPokemon","catch","error","species","weight","types","sprites","moves","fullImageUrl","typesStr","front_default","typeInfo","type","length","href","url","generatePokemonJSX","App","exact","path","render","Boolean","window","location","hostname","createBrowserHistory","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.ec03e372.chunk.js","sourcesContent":["export function toFirstCharUpper(word) {\n    return word.charAt(0).toUpperCase() + word.slice(1);\n}","import React, { useState, useEffect } from \"react\";\nimport {\n    AppBar, Toolbar, Grid, Link,\n    Card, CardMedia, CardContent, CircularProgress, Typography, TextField\n} from \"@material-ui/core\";\nimport { makeStyles, fade } from \"@material-ui/core/styles\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport { toFirstCharUpper } from \"./utils\";\nimport axios from \"axios\";\n\nconst useStyles = makeStyles((theme) => ({\n    pokedexContainer: {\n        paddingTop: \"20px\",\n        paddingLeft: \"50px\",\n        paddingRight: \"50px\",\n    },\n    cardMedia: {\n        margin: \"auto\",\n    },\n    cardContent: {\n        // boxShadow: \"20px\",\n        textAlign: \"center\",\n    },\n    card: {\n        boxShadow: '2px 4px 15px rgba(0, 0, 0, .1)',\n    },\n    searchInput: {\n        width: \"200px\",\n        margin: \"5px\",\n    },\n    searchIcon: {\n        alignSelf: \"flex-end\",\n        marginBottom: \"5px\",\n    },\n    searchContainer: {\n        display: 'flex',\n        backgroundColor: fade(theme.palette.common.white, 0.15),\n        paddingLeft: \"20px\",\n        paddingRight: \"20px\",\n        marginTop: \"5px\",\n        marginBottom: \"5px\",\n    },\n    title: {\n        display: 'none',\n        marginLeft: \"10px\",\n        [theme.breakpoints.up('sm')]: {\n            display: 'block',\n        },\n    },\n}));\n\nconst Pokedex = props => {\n    const classes = useStyles();\n    const { history } = props;\n    const [pokemonData, setPokemonData] = useState({});\n    const [filter, setFilter] = useState(\"\");\n\n    function handleSearchChange(e) {\n        setFilter(e.target.value);\n    }\n\n    useEffect(() => {\n        axios\n            .get(`https://pokeapi.co/api/v2/pokemon?limit=807`)\n            .then((response) => {\n                const { data } = response;\n                const { results } = data;\n                const newPokemonData = {};\n\n                results.forEach((pokemon, index) => {\n                    newPokemonData[index + 1] = {\n                        id: index + 1,\n                        name: pokemon.name,\n                        sprite: `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${index + 1}.png`,\n                    };\n                });\n                setPokemonData(newPokemonData);\n            });\n    }, []);\n\n    function getPokemonCard(pokemonId) {\n        console.log(pokemonData[`${pokemonId}`]);\n        const { id, name, sprite } = pokemonData[pokemonId];\n\n        return (\n            <Grid item xs={12} sm={4} key={pokemonId}> {/* responsive - sm for smaller mobile screen sizes */}\n                <Card className={classes.card} onClick={() => history.push(`/${pokemonId}`)}>\n                    <CardMedia\n                        className={classes.cardMedia}\n                        image={sprite}\n                        style={{ width: \"130px\", height: \"130px\" }}\n                    />\n                    <CardContent className={classes.cardContent}>\n                        <Typography variant=\"h6\">\n                            {`${toFirstCharUpper(name)}`}\n                        </Typography>\n                        <Typography variant=\"subtitle2\" color=\"textSecondary\">{`No. ${id}`}</Typography>\n                    </CardContent>\n                </Card>\n            </Grid>\n        );\n    }\n\n    return (\n        <>\n            <AppBar position=\"sticky\" color=\"inherit\">\n                <Toolbar>\n                    <img style={{ width: \"20px\", height: \"20px\" }}\n                        margin={20}\n                        src=\"https://pngimg.com/uploads/pokeball/pokeball_PNG8.png\" />\n                    <Typography className={classes.title} variant=\"h6\" noWrap>\n                        <Link color=\"black\" onClick={() => history.push(\"/\")}>   Pokédex</Link>\n                    </Typography>                    <div className={classes.searchContainer}>\n                        <SearchIcon className={classes.searchIcon}></SearchIcon>\n                        <TextField className={classes.searchInput}\n                            label=\"Pokemon\"\n                            variant=\"standard\"\n                            onChange={handleSearchChange}/>\n                    </div>    \n\n                </Toolbar>\n            </AppBar>\n            {pokemonData ? (\n                <Grid container spacing={2} className={classes.pokedexContainer}>\n                    {Object.keys(pokemonData).map((pokemonId) => \n                        pokemonData[pokemonId].name.includes(filter.toLowerCase()) && getPokemonCard(pokemonId)\n                    )}\n                    \n                </Grid>\n            ) : (\n                <CircularProgress />\n            )}\n\n        </>\n    )\n}\n\nexport default Pokedex;","import React, { useState, useEffect } from \"react\";\nimport {\n    Typography, Link, CircularProgress, Button, Toolbar,\n    Grid, Card, AppBar, TextField, CardContent\n} from \"@material-ui/core\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport { toFirstCharUpper } from \"./utils\";\nimport axios from \"axios\";\nimport { makeStyles, fade } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme) => ({\n    container: {\n        paddingTop: \"20px\",\n        paddingLeft: \"50px\",\n        paddingRight: \"50px\",\n    },\n    idNumText: {\n        position: \"absolute\",\n        top: \"50%\",\n        left: \"50%\",\n        color: \"yellow\",\n    },\n    img: {\n        verticalAlign: \"middle\",\n        display: \"inline-block\",\n    },\n    name: {\n        verticalAlign: \"middle\",\n        display: \"inline-block\",\n    },\n    searchInput: {\n        width: \"200px\",\n        margin: \"5px\",\n    },\n    searchIcon: {\n        alignSelf: \"flex-end\",\n        marginBottom: \"5px\",\n    },\n    searchContainer: {\n        display: 'flex',\n        backgroundColor: fade(theme.palette.common.white, 0.15),\n        paddingLeft: \"20px\",\n        paddingRight: \"20px\",\n        marginTop: \"5px\",\n        marginBottom: \"5px\",\n    },\n    title: {\n        display: 'none',\n        marginLeft: \"10px\",\n        [theme.breakpoints.up('sm')]: {\n            display: 'block',\n        },\n    },\n    statsCard: {\n        height: \"80px\",\n        textAlign: 'center',\n    }\n}));\n\nconst Pokemon = props => {\n    const classes = useStyles();\n    const { match, history } = props;\n    const { params } = match;\n    const { pokemonId } = params;\n    const [pokemon, setPokemon] = useState(undefined);\n\n    useEffect(() => {\n        axios\n            .get(`https://pokeapi.co/api/v2/pokemon/${pokemonId}/`)\n            .then((response) => {\n                const { data } = response;\n                setPokemon(data);\n            })\n            .catch((error) => {\n                setPokemon(false);\n            });\n    }, [pokemonId]);\n\n    function generatePokemonJSX() {\n        const { name, id, species, height, weight, types, sprites, moves } = pokemon;\n        const fullImageUrl = `https://pokeres.bastionbot.org/images/pokemon/${id}.png`;\n        const { front_default } = sprites;\n        var typesStr = \"\";\n        types.map((typeInfo) => {\n            const { type } = typeInfo;\n            const { name } = type;\n            typesStr = typesStr + name + \" / \";\n        })\n        typesStr = typesStr.slice(0, typesStr.length - 3);\n        return (\n            <>\n                <br/>\n                <div style={{paddingLeft: \"50px\", marginTop: \"15px\", verticalAlign: \"middle\", display: \"inline-block\", paddingRight: \"20px\"}}>\n                    <img style={{ width: \"150px\", height: \"150px\" }} src={fullImageUrl} />\n                </div>\n                <div style={{ verticalAlign: \"middle\", display: \"inline-block\" }}>\n                    <Typography variant=\"h3\">\n                        <Link href={species.url}>{toFirstCharUpper(name)}</Link>\n\n                    </Typography>\n                    <Typography variant=\"subtitle2\" color=\"textSecondary\">No. {`${id}`}</Typography>\n                </div>\n\n                <div className={classes.container}>\n                    <Card><CardContent verticalAlign=\"middle\">\n                        <Typography variant=\"body\">Types: {typesStr}</Typography>\n                    </CardContent></Card>\n                </div>\n\n\n                <Grid container spacing={2} className={classes.container}>\n                    <Grid item sm={4}>\n                        <Card><CardContent className={classes.statsCard}>\n                            <Typography variant=\"overline\">Height</Typography>\n                            <Typography>{height}</Typography>                        </CardContent></Card>\n                    </Grid>\n                    <Grid item sm={4}>\n                        <Card><CardContent className={classes.statsCard}>\n                            <Typography variant=\"overline\">Weight</Typography>\n                            <Typography>{weight}</Typography>\n                        </CardContent></Card>\n                    </Grid>\n                    <Grid item sm={4}>\n                        <Card><CardContent className={classes.statsCard}>\n                            <Typography variant=\"overline\">Number of moves</Typography>\n                            <Typography>{moves.length}</Typography>\n                        </CardContent></Card>\n                    </Grid>\n                </Grid>\n\n\n            </>\n        )\n    }\n\n    return (<>\n        <AppBar position=\"sticky\" color=\"inherit\">\n            <Toolbar>\n                <img style={{ width: \"20px\", height: \"20px\" }}\n                    marginBottom={20}\n                    src=\"https://pngimg.com/uploads/pokeball/pokeball_PNG8.png\" />\n                <Typography className={classes.title} variant=\"h6\" noWrap>\n                    <Link color=\"black\" onClick={() => history.push(\"/\")}>   Pokédex</Link>\n                </Typography>\n                <div className={classes.searchContainer}>\n                    <SearchIcon className={classes.searchIcon}></SearchIcon>\n                    <TextField className={classes.searchInput}\n                        label=\"Pokemon\"\n                        variant=\"standard\"\n                        onChange={() => history.push(\"/\")} />\n                </div>\n            </Toolbar>\n        </AppBar>\n        <div className={classes.container}>\n            {pokemon === undefined && <CircularProgress/>}\n            {pokemon !== undefined && pokemon && generatePokemonJSX()}\n            {pokemon === false && <Typography>Pokemon not found.</Typography>}\n        </div>\n    </>);\n}\n\nexport default Pokemon;","import React from 'react';\nimport Pokedex from \"./Pokedex\";\nimport Pokemon from \"./pokemonDetail\";\nimport { Route, Switch } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <Switch>\n      <Route\n        exact path=\"/\"\n        render={(props) => <Pokedex {...props} />} />\n      <Route\n        exact path=\"/:pokemonId\"\n        render={(props) => <Pokemon {...props} />} />\n    </Switch>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Router } from \"react-router-dom\";\nimport { createBrowserHistory } from \"history\";\n\nconst history = createBrowserHistory();\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router history={history}>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}